## 상대 경로
## 현재 디렉토리에서 상위 디렉토리 이동(../)
## csv라는 하위 디렉토리 이동(csv/)
## example.csv (example.csv)
df <- read.csv('../csv/example.csv')
setwd("C:/Users/admin/OneDrive/바탕 화면/유비온/R 작업")
## 상대 경로
## 현재 디렉토리에서 상위 디렉토리 이동(../)
## csv라는 하위 디렉토리 이동(csv/)
## example.csv (example.csv)
df <- read.csv('../csv/example.csv')
df
## 절대 경로
df2 <- read.csv("C:/Users/admin/OneDrive/바탕 화면/유비온/csv")
df2
## 절대 경로
df2 <- read.csv("C:/Users/admin/OneDrive/바탕 화면/유비온/csv")
## 절대 경로
df2 <- read.csv("C:/Users/admin/OneDrive/바탕 화면/유비온/csv")
df2
## 절대 경로
df2 <- read.csv("C:/Users/admin/OneDrive/바탕화면\유비온\csv")
## 상대 경로
## 현재 디렉토리에서 상위 디렉토리 이동(../)
## csv라는 하위 디렉토리 이동(csv/)
## example.csv (example.csv)
df <- read.csv('../csv/example.csv')
df
## head(데이터프레임명, 개수) : 데이터프레임 상위 n개를 출력
head(df, 3)
df %>%  head(3)
## 인덱스의 조건식으로 필터링
## filter(조건식)
df %>%  filer(class == 1)
## 인덱스의 조건식으로 필터링
## filter(조건식)
df %>% filter(gender == 'male')
## 인덱스의 조건식으로 필터링
## filter(조건식)
df %>% filter(Gender == 'male')
## base 함수로 필터링
df %>% base(Gender =='male')
## base 함수로 필터링
df %>% base(Gender == 'male')
## base 함수로 필터링
## 조건식을 생성
df$Gender == 'male'
df %>% base(Gender == 'male')
df[flag, ]
## base 함수로 필터링
## 조건식을 생성
df$Gender == 'male' -> flag
df[flag, ]
## 특정 컬럼의 데이터만 출력
## 패키지 사용
df %>% select('Name', 'phone')
## 특정 컬럼의 데이터만 출력
## 패키지 사용
df %>% select ('Name', 'phone')
## 특정 컬럼의 데이터만 출력
## 패키지 사용
df %>% select ('Name', 'Phone')
df %>% select (-Gender)
df %>% select (!Gender)
df %>% select (-Gender)
# Base
df$!Gender
# Base
df=data.frame(Name,Phone)
df
# Base
df=data.frame(df$Name,df$Phone)
df
# 패키지 설치
install.packages('dplyr')
# 패키지를 로드
library(dplyr)
## 파일의 경로
## 1. 절대경로
## - 절대적인 주소 값
## - 환경이 변하더라도 같은 위치를 지정
## 2. 상대경로
## - 상대적인 주소 값
## - 환경이 변함에 따라 위치도 변화
## - ./ : 현재 작업중인 디렉토리
## - ../ : 현재 디렉토리에서 상위 디렉토리 이동
## - 폴더명/ : 하위 디렉토리(폴더명)로 이동
## 외부의 데이터 파일 로드
## csv 파일 로드 -> read.csv(파일의 경로)
## 상대 경로
## 현재 디렉토리에서 상위 디렉토리 이동(../)
## csv라는 하위 디렉토리 이동(csv/)
## example.csv (example.csv)
df <- read.csv('../csv/example.csv')
df
## 파이프 연산자
## %>%  : ctrl + shift + M
## 왼쪽에 있는 데이터를 오른쪽의 함수에 대입 (두 개를 연결)
## head(데이터프레임명, 개수) : 데이터프레임 상위 n개를 출력
head(df, 3)
df %>%  head(3)
## 인덱스의 조건식으로 필터링
## filter(조건식)
df %>% filter(Gender == 'male')
## base 함수로 필터링
## 조건식을 생성
df$Gender == 'male' -> flag
df[flag, ]
## 특정 컬럼의 데이터만 출력
## 패키지 사용
df %>% select ('Name', 'Phone')
df %>% select (-Gender)
# Base
df1=data.frame(df$Name,df$Phone)
df
## 상대 경로
## 현재 디렉토리에서 상위 디렉토리 이동(../)
## csv라는 하위 디렉토리 이동(csv/)
## example.csv (example.csv)
df <- read.csv('../csv/example.csv')
df
# Base
df1=data.frame(df$Name,df$Phone)
df1
df
head(df,5)
df %>% head(5)
# Base
df[-Gender]
# Base
df[['Name']]
# Base
df[['Name','Phone']]
# Base
df[c('Name','Phone')]
# Base
df[c(Name,Phone)]
# Base
df[c('Name','Phone')]
## 성별이 남자인 데이터 중 이름과 휴대폰 번호만 출력
## 패키지 사용
df %>%  filter(Gender == 'male') %>%
select(Name, Phone)
source("C:/Users/admin/OneDrive/바탕 화면/유비온/R 작업/24205.R", echo=TRUE)
install.packages("dplyr")
## 성별이 남자인 데이터 중 이름과 휴대폰 번호만 출력
## 패키지 사용
df %>%
filter(Gender == 'male') %>%
select(Name, Phone)
## 성별이 남자인 데이터 중 이름과 휴대폰 번호만 출력
## 패키지 사용
df %>%
filter(Gender == 'male') %>%
select(Name, Phone)
## 성별이 남자인 데이터 중 이름과 휴대폰 번호만 출력
## 패키지 사용
df %>%
filter(Gender == 'male') %>%
select(Name, Phone)
# 패키지 설치
install.packages('dplyr')
# 패키지를 로드
library(dplyr)
## 상대 경로
## 현재 디렉토리에서 상위 디렉토리 이동(../)
## csv라는 하위 디렉토리 이동(csv/)
## example.csv (example.csv)
df <- read.csv('../csv/example.csv')
## 성별이 남자인 데이터 중 이름과 휴대폰 번호만 출력
## 패키지 사용
df %>%
filter(Gender == 'male') %>%
select(Name, Phone)
## 성별이 남자인 데이터 중 이름과 휴대폰 번호만 출력
## 패키지 사용
df %>%
filter(Gender == 'male') %>%
select(Name, Phone)
df[flag,]
df[flag,] -> df1
df1[c('Name, Phone')]
df1[c('Name, 'Phone')]
## Base
df$Gender == 'male' -> flag
df[flag, c('Name', 'Phone')]
exam <- read.csv("../csv/csv_exam.csv")
exam
exam
차순)
## 차순 정렬 변경 (오름차순 / 내림차순)
## 수학 성적을 기준으로 오름차순 정렬
exam %>% arrange(math)
## 수학 성적을 기준으로 내림차순 정렬
exam %>% arrange(desc(math))
exam
exam %>% arrange(-math)
## Base
order(exam$math)
## Base
order(exam$math) -> flag2
## Base
## 오름차순 정렬
order(exam$math) -> flag2
exam[flag2,]
# 내림차순 정렬
order(exam$math, decreasing = TRUE) -> flag3
exam[flag3,]
## 정렬 방식의 조건이 2개 이상인 경우
## 학년 별로 내림차순 정렬 -> 수학 성적은 오름차순
exam %>%
arrange(desc(class), math)
## 정렬 방식의 조건이 2개 이상인 경우
## 학년 별로 내림차순 정렬 -> 수학 성적은 오름차순
exam %>%
arrange(desc(class), math)
### 그룹화 연산
## class별 수학, 과학, 영어의 평균점수를 출력
exam %>%
group_by(class)
### 그룹화 연산
## class별 수학, 과학, 영어의 평균점수를 출력
exam %>%
group_by(class) %>%
summarise(
mean_math = mean(math),
mean_english = mean(english),
mean_science = mean(science)
)
df_2 <- data.frame(
id = 3:6
)
## 유니언 결합
df_1 <- data.frame(
id = 1:5,
score = c(70, 80, 65, 80, 90)
)
df_2 <- data.frame(
id = 3:6
)
df_2 <- data.frame(
id = 3:6
weight = c(60,50,70,80)
df_2 <- data.frame(
id = 3:6,
weight = c(60,50,70,80)
)
## 행 결합 함수 (rbind() : 데이터프레임의 구조가 같은 데이터 결합)
rbind(df_1, df_2) ## 에러 발생 (데이터의 구조가 다르기 때문)
df_3 <- data.frame(
id : 3:8,
score = c(50, 70, 80, 70, 90, 50)
)
rbind(df_1, df_3)
df_3 <- data.frame(
id : 3:8,
score = c(50, 70, 80, 70, 90, 50)
)
df_3 <- data.frame(
id : 3:8,
score = c(50, 70, 80, 70, 90, 50)
)
## 유니언 결합
df_1 <- data.frame(
id = 1:5,
score = c(70, 80, 65, 80, 90)
)
df_2 <- data.frame(
id = 3:6,
weight = c(60,50,70,80)
)
## 행 결합 함수 (rbind() : 데이터프레임의 구조가 같은 데이터 결합)
rbind(df_1, df_2) ## 에러 발생 (데이터의 구조가 다르기 때문)
df_3 <- data.frame(
id : 3:8,
score = c(50, 70, 80, 70, 90, 50)
)
rbind(df_1, df_3)
df_3 <- data.frame(
id = 3:8,
score = c(50, 70, 80, 70, 90, 50)
)
rbind(df_1, df_3)
## bind_rows() : 데이터의 구조와 상관없이 데이터를 결합
bind_rows(df_1, df_2)
bind_rows(df_1, df_2, df_3)
## bind_rows() : 데이터의 구조와 상관없이 데이터를 결합
bind_rows(df_1, df_2)
bind_rows(df_1, df_2, df_3)
## 조인결합
## 특정한 조건이 참인 경우 컬럼의 데이터를 추가
df_4 <- data.frame(
id = c('test', 'test2', 'test3', 'test4'),
item = c('A', 'B', 'B', 'C')
)
df_5 <- data.frame(
item = c('A', 'B', 'C'),
price = c(1000, 2000, 3000)
)
## inner_join() : 두개의 데이터프레임에서 모두 가진 데이터만 결합하여 출력
inner_join(df_4, df_5, by='item')
## left_join() : 왼쪽 데이터프레임을 기준으로 결합
left_join(df_4, df_5, by='item')
## inner_join() : 두개의 데이터프레임에서 모두 가진 데이터만 결합하여 출력
inner_join(df_4, df_5, by='item')
## left_join() : 왼쪽 데이터프레임을 기준으로 결합
left_join(df_4, df_5, by='item')
right_join(df_4, df_5, by='item')
## inner_join() : 두개의 데이터프레임에서 모두 가진 데이터만 결합하여 출력
inner_join(df_4, df_5, by='item')
## left_join() : 왼쪽 데이터프레임을 기준으로 결합
left_join(df_4, df_5, by='item')
right_join(df_4, df_5, by='item')
full_join(df_4, df_5, by='item')
## 조인결합
## 특정한 조건이 참인 경우 컬럼의 데이터를 추가
df_4 <- data.frame(
id = c('test', 'test2', 'test3', 'test4'),
item = c('A', 'B', 'B', 'D')
)
df_5 <- data.frame(
item = c('A', 'B', 'C'),
price = c(1000, 2000, 3000)
)
full_join(df_4, df_5, by='item')
library(ggplot2)
intall.packages('ggplot2')
library(ggplot2)
intall.packages('ggplot2')
library(ggplot2)
intall.packages('ggplot2')
intall.packages('ggplot2')
intall.packages('ggplot2')
library(ggplot2)
install.packages('ggplot2')
## ggplot2 패키지 안에 샘플데이터를 로드
midwest <- ggplot2::midwest
head(midwest, 3)
str(midwest)
## 데이터프레임을 뷰어창에서 확인
View(midwest)
## 컬럼의 이름을 변경
## rename(데이터프레임명, 새컬럼명 = 변경할 컬럼명)
## popasian컬럼을 asian
## poptotal컬럼을 total 변경
rename(midwest, asian = popasian)
## ggplot2 패키지 안에 샘플데이터를 로드
midwest <- ggplot2::midwest
head(midwest, 3)
str(midwest)
## 데이터프레임을 뷰어창에서 확인
View(midwest)
## 컬럼의 이름을 변경
## rename(데이터프레임명, 새컬럼명 = 변경할 컬럼명)
## popasian컬럼을 asian
## poptotal컬럼을 total 변경
rename(midwest, asian = popasian)
## 컬럼의 이름을 변경
## rename(데이터프레임명, 새컬럼명 = 변경할 컬럼명)
## popasian컬럼을 asian
## poptotal컬럼을 total 변경
rename(midwest, asian = popasian) -> midwest
rename(midwestm total = poptotal)
rename(midwest, total = poptotal)
rename(midwest, total = poptotal) -> midwest
## Base
## 컬럼의 3개만 추출
midwest[c('county', 'asian', 'total')]
midwest %>%
select(country, asian, total)
midwest %>%
select(county, asian, total)
midwest %>%
select(county, asian, total) -> df
## 벡터데이터를 이용하여 아시아 인구 비율을 생성
df$asian
df$total
## 벡터데이터를 이용하여 아시아 인구 비율을 생성
(df$asian / df$total)
## 벡터데이터를 이용하여 아시아 인구 비율을 생성
(df$asian / df$total) * 100
## 벡터데이터를 이용하여 아시아 인구 비율을 생성
(df$asian / df$total) * 100 -> ratio
ratio
bind_cols(df, ratio)
bind_cols(df, ratio = ratio)
cbind(df, ratio)
data.fram(df, ratio)
data.frame(df, ratio)
df$ratio <- ratio
head(df, 1)
# 패키지 이용해서 파생변수 추가
df2 <- midwest[c('county','asian','total')]
# 패키지 이용해서 파생변수 추가
df2 <- midwest[c('county','asian','total')]
## mutate() : 파생변수 생성 함수
df2 %>%
mutate()
## mutate() : 파생변수 생성 함수
df2 %>%
mutate(ratio = (asian / total) * 100)
## 히스토그램
## hist(벡터데이터)
hist(df$ratio)
## 전체 ratio의 평균 값을 출력
mean(df$rati)
## 전체 ratio의 평균 값을 출력
mean(df$ratio)
## 전체 ratio의 평균 값을 출력
mean(df$ratio) -> mean_rati
## 전체 ratio의 평균 값을 출력
mean(df$ratio) -> mean_ratio
ifelse(mean_ratio > ratio, 'small', 'large') -> group
cbind(group, df)
cbind(group, df) -> df
df
ifelse(mean_ratio > ratio, 'small', 'large') -> group
cbind(group, df) -> df
df
df$group=NULL
df
hist(df)
hist(df$ratio)
df
df$group=NULL
df
df
df$group=NULL
df
df$ratio > mean_ratio
df$ratio > mean_ratio -> flag4
## 패키지 이용하여 컬럼을 추가
df %>%
mutate(group = ifelse(
ratio > mean(ratio),
'large',
'small')
)
## 패키지 이용하여 컬럼을 추가
df %>%
mutate(group = ifelse(
ratio > mean(ratio),
'large',
'small')
)
ifelse(flag4 , 'large', 'small') -> group_data
df$group = group_data
## 패키지 이용하여 컬럼을 추가
df %>%
mutate(group = ifelse(
ratio > mean(ratio),
'large',
'small')
)
table(df$group)
hist(df$group)
midwest <- ggplot2 :: midwest
midwest
rename(midwest, popadult = adult) -> midwest
rename(midwest, poptotal = total) -> midwest
rename(midwest, popadult = adult)
rename(midwest, adult = popadult) -> midwest
rename(midwest, adult = popadult)
rename(midwest, adult = popadults)
rename(midwest, adult = popadults) -> midwest
rename(midwest, total = poptotal)
rename(midwest, total = poptotal) -> midwest
midwest
cbind(midwest$county,midwest$adult,midwest$total)
cbind(midwest$county,midwest$adult,midwest$total) -> midwest1
(midwest$total-midwest$adult) / midwest$total * 100
(midwest$total-midwest$adult) / midwest$total * 100 -> child_ratio
cbind(midwest1, child_ratio) -> midwest2
midwest2 %>% arrange(desc(child_rati))
midwest2 %>% arrange(desc(child_ratio))
library(dplyr)
midwest2 %>% arrange(desc(child_ratio))
head(midwest2)
m
midwest2 %>% arrange(desc(child_ratio))
cbind(midwest1, child_ratio) -> midwest2
midwest2 %>% arrange(desc(child_ratio))
midwest
cbind(midwest$county,midwest$adult,midwest$total) -> midwest1
(midwest$total-midwest$adult) / midwest$total * 100 -> child_ratio
cbind(midwest1, child_ratio) -> midwest2
head(midwest2)
data.frame(midwest1, child_ratio) -> midwest2
head(midwest2)
midwest2 %>% arrange(desc(child_ratio))
head(midwest2)
midwest2 %>% arrange(desc(child_ratio))
head(midwest2)
midwest2=midwest2 %>% arrange(desc(child_ratio))
head(midwest2)
head(midwest2,5)
rename(midwest, adult = X1) -> midwest2
rename(midwest2, adult = X1) -> midwest2
rename(midwest2, total = X2) -> midwest2
head(midwest2,5)
rename(midwest2, adult = total) -> midwest2
rename(midwest2, total = X3) -> midwest2
head(midwest2,5)
rename((midwest2,county=adult))
rename(midwest2,county=adult)
head(midwest2,5)
rename(midwest2,county=adult) -> midwest2
head(midwest2,5)
renmae(midwest2,adult=total) -> midwest2
rename(midwest2,adult=total) -> midwest2
rename(midwest2,total=X3) -> midwest2
head(midwest2,5)
